#include "game_message_mgr.h"
#include "ConfigMgr.h"

#define GLOG_NO_ABBREVIATED_SEVERITIES
#include <glog/logging.h>


MessageMgr::MessageMgr(MessageMgr *parent)
{

}

void MessageMgr::Initialize()
{
    auto cfg_reader = ConfigMgr::getInstance()->GetAppCfg();
    std::string host;
    std::string port;
    cfg_reader->getConfig("xGateWay", "host", host);
    cfg_reader->getConfig("xGateWay", "port", port);

    DCHECK(gatewayconnector_ == nullptr);
    gatewayconnector_ = new assistx2::TcpHanlderWrapper(ios_);
    if (gatewayconnector_ == nullptr)
    {
        LOG(ERROR) << ("RunFastGameMgr::Initialize gatewayconnector_ is nullptr.");
        exit(-1);
    }

    gatewayconnector_->RegisterCloseHandler(boost::bind(&MessageMgr::OnClose, this, _1, _2));
    gatewayconnector_->RegisterConnectHandler(boost::bind(&MessageMgr::OnConnect, this, _1, _2));
    gatewayconnector_->RegisterMessageHandler(boost::bind(&MessageMgr::OnMessage, this, _1, _2));
    gatewayconnector_->Connect(host, static_cast<unsigned short>(assistx2::atoi_s(port)));

    {
        std::string host;
        std::string port;
        ConfigMgr::getInstance()->GetAppCfg()->getConfig("Proxy", "host", host);
        ConfigMgr::getInstance()->GetAppCfg()->getConfig("Proxy", "port", port);

        if (host.empty() == false)
        {
            DCHECK(proxy_ == nullptr);
            proxy_ = new assistx2::TcpHanlderWrapper(ios_, assistx2::ParserType::STREAMEX_PARSER);
            if (proxy_ == nullptr)
            {
                LOG(ERROR) << ("RunFastGameMgr::Initialize INIT FAILED.");
                exit(-1);
            }

            proxy_->RegisterCloseHandler(boost::bind(&MessageMgr::OnProxyClose, this, _1));
            proxy_->RegisterConnectHandler(boost::bind(&MessageMgr::OnProxyConnect, this, _1));
            proxy_->RegisterMessageHandler(boost::bind(&MessageMgr::OnProxyMessage, this, _1, _2));
            proxy_->Connect(host, assistx2::atoi_s(port));
        }
        LOG(INFO) << "Proxy host:=" << host << ", port:=" << port;
    }

    return 0;
}

int32_t MessageMgr::OnMessage(assistx2::TcpHandler *socket, boost::shared_ptr<assistx2::NativeStream> native_stream)
{

}

int32_t MessageMgr::OnConnect(assistx2::TcpHandler *handler, assistx2::ErrorCode err)
{

}

int32_t MessageMgr::OnClose(assistx2::TcpHandler *handler, assistx2::ErrorCode err)
{

}
