// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: memberfides.proto

#ifndef PROTOBUF_memberfides_2eproto__INCLUDED
#define PROTOBUF_memberfides_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_memberfides_2eproto();
void protobuf_AssignDesc_memberfides_2eproto();
void protobuf_ShutdownFile_memberfides_2eproto();

class MemberFides;

// ===================================================================

class MemberFides : public ::google::protobuf::Message {
 public:
  MemberFides();
  virtual ~MemberFides();

  MemberFides(const MemberFides& from);

  inline MemberFides& operator=(const MemberFides& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MemberFides& default_instance();

  void Swap(MemberFides* other);

  // implements Message ----------------------------------------------

  MemberFides* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MemberFides& from);
  void MergeFrom(const MemberFides& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 mid = 1;
  inline bool has_mid() const;
  inline void clear_mid();
  static const int kMidFieldNumber = 1;
  inline ::google::protobuf::int32 mid() const;
  inline void set_mid(::google::protobuf::int32 value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int32 sex = 3;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 3;
  inline ::google::protobuf::int32 sex() const;
  inline void set_sex(::google::protobuf::int32 value);

  // required string btd = 4;
  inline bool has_btd() const;
  inline void clear_btd();
  static const int kBtdFieldNumber = 4;
  inline const ::std::string& btd() const;
  inline void set_btd(const ::std::string& value);
  inline void set_btd(const char* value);
  inline void set_btd(const char* value, size_t size);
  inline ::std::string* mutable_btd();
  inline ::std::string* release_btd();
  inline void set_allocated_btd(::std::string* btd);

  // required string city = 5;
  inline bool has_city() const;
  inline void clear_city();
  static const int kCityFieldNumber = 5;
  inline const ::std::string& city() const;
  inline void set_city(const ::std::string& value);
  inline void set_city(const char* value);
  inline void set_city(const char* value, size_t size);
  inline ::std::string* mutable_city();
  inline ::std::string* release_city();
  inline void set_allocated_city(::std::string* city);

  // required string icon = 6;
  inline bool has_icon() const;
  inline void clear_icon();
  static const int kIconFieldNumber = 6;
  inline const ::std::string& icon() const;
  inline void set_icon(const ::std::string& value);
  inline void set_icon(const char* value);
  inline void set_icon(const char* value, size_t size);
  inline ::std::string* mutable_icon();
  inline ::std::string* release_icon();
  inline void set_allocated_icon(::std::string* icon);

  // required int32 invite = 7;
  inline bool has_invite() const;
  inline void clear_invite();
  static const int kInviteFieldNumber = 7;
  inline ::google::protobuf::int32 invite() const;
  inline void set_invite(::google::protobuf::int32 value);

  // required int32 gp = 8;
  inline bool has_gp() const;
  inline void clear_gp();
  static const int kGpFieldNumber = 8;
  inline ::google::protobuf::int32 gp() const;
  inline void set_gp(::google::protobuf::int32 value);

  // required int32 sta = 9;
  inline bool has_sta() const;
  inline void clear_sta();
  static const int kStaFieldNumber = 9;
  inline ::google::protobuf::int32 sta() const;
  inline void set_sta(::google::protobuf::int32 value);

  // required int64 mtime = 10;
  inline bool has_mtime() const;
  inline void clear_mtime();
  static const int kMtimeFieldNumber = 10;
  inline ::google::protobuf::int64 mtime() const;
  inline void set_mtime(::google::protobuf::int64 value);

  // required string email = 12;
  inline bool has_email() const;
  inline void clear_email();
  static const int kEmailFieldNumber = 12;
  inline const ::std::string& email() const;
  inline void set_email(const ::std::string& value);
  inline void set_email(const char* value);
  inline void set_email(const char* value, size_t size);
  inline ::std::string* mutable_email();
  inline ::std::string* release_email();
  inline void set_allocated_email(::std::string* email);

  // required int32 bindtime = 11;
  inline bool has_bindtime() const;
  inline void clear_bindtime();
  static const int kBindtimeFieldNumber = 11;
  inline ::google::protobuf::int32 bindtime() const;
  inline void set_bindtime(::google::protobuf::int32 value);

  // required string tel = 13;
  inline bool has_tel() const;
  inline void clear_tel();
  static const int kTelFieldNumber = 13;
  inline const ::std::string& tel() const;
  inline void set_tel(const ::std::string& value);
  inline void set_tel(const char* value);
  inline void set_tel(const char* value, size_t size);
  inline ::std::string* mutable_tel();
  inline ::std::string* release_tel();
  inline void set_allocated_tel(::std::string* tel);

  // required string realname = 14;
  inline bool has_realname() const;
  inline void clear_realname();
  static const int kRealnameFieldNumber = 14;
  inline const ::std::string& realname() const;
  inline void set_realname(const ::std::string& value);
  inline void set_realname(const char* value);
  inline void set_realname(const char* value, size_t size);
  inline ::std::string* mutable_realname();
  inline ::std::string* release_realname();
  inline void set_allocated_realname(::std::string* realname);

  // required string identity = 15;
  inline bool has_identity() const;
  inline void clear_identity();
  static const int kIdentityFieldNumber = 15;
  inline const ::std::string& identity() const;
  inline void set_identity(const ::std::string& value);
  inline void set_identity(const char* value);
  inline void set_identity(const char* value, size_t size);
  inline ::std::string* mutable_identity();
  inline ::std::string* release_identity();
  inline void set_allocated_identity(::std::string* identity);

  // required int32 yellowvip = 16;
  inline bool has_yellowvip() const;
  inline void clear_yellowvip();
  static const int kYellowvipFieldNumber = 16;
  inline ::google::protobuf::int32 yellowvip() const;
  inline void set_yellowvip(::google::protobuf::int32 value);

  // required int32 isyearvip = 17;
  inline bool has_isyearvip() const;
  inline void clear_isyearvip();
  static const int kIsyearvipFieldNumber = 17;
  inline ::google::protobuf::int32 isyearvip() const;
  inline void set_isyearvip(::google::protobuf::int32 value);

  // required string passwd = 18;
  inline bool has_passwd() const;
  inline void clear_passwd();
  static const int kPasswdFieldNumber = 18;
  inline const ::std::string& passwd() const;
  inline void set_passwd(const ::std::string& value);
  inline void set_passwd(const char* value);
  inline void set_passwd(const char* value, size_t size);
  inline ::std::string* mutable_passwd();
  inline ::std::string* release_passwd();
  inline void set_allocated_passwd(::std::string* passwd);

  // required string salt = 19;
  inline bool has_salt() const;
  inline void clear_salt();
  static const int kSaltFieldNumber = 19;
  inline const ::std::string& salt() const;
  inline void set_salt(const ::std::string& value);
  inline void set_salt(const char* value);
  inline void set_salt(const char* value, size_t size);
  inline ::std::string* mutable_salt();
  inline ::std::string* release_salt();
  inline void set_allocated_salt(::std::string* salt);

  // required int32 lgtm = 20;
  inline bool has_lgtm() const;
  inline void clear_lgtm();
  static const int kLgtmFieldNumber = 20;
  inline ::google::protobuf::int32 lgtm() const;
  inline void set_lgtm(::google::protobuf::int32 value);

  // required int32 lxlg = 21;
  inline bool has_lxlg() const;
  inline void clear_lxlg();
  static const int kLxlgFieldNumber = 21;
  inline ::google::protobuf::int32 lxlg() const;
  inline void set_lxlg(::google::protobuf::int32 value);

  // required string qq = 22;
  inline bool has_qq() const;
  inline void clear_qq();
  static const int kQqFieldNumber = 22;
  inline const ::std::string& qq() const;
  inline void set_qq(const ::std::string& value);
  inline void set_qq(const char* value);
  inline void set_qq(const char* value, size_t size);
  inline ::std::string* mutable_qq();
  inline ::std::string* release_qq();
  inline void set_allocated_qq(::std::string* qq);

  // required string address = 23;
  inline bool has_address() const;
  inline void clear_address();
  static const int kAddressFieldNumber = 23;
  inline const ::std::string& address() const;
  inline void set_address(const ::std::string& value);
  inline void set_address(const char* value);
  inline void set_address(const char* value, size_t size);
  inline ::std::string* mutable_address();
  inline ::std::string* release_address();
  inline void set_allocated_address(::std::string* address);

  // required int64 regip = 24;
  inline bool has_regip() const;
  inline void clear_regip();
  static const int kRegipFieldNumber = 24;
  inline ::google::protobuf::int64 regip() const;
  inline void set_regip(::google::protobuf::int64 value);

  // required int32 active_assets = 25;
  inline bool has_active_assets() const;
  inline void clear_active_assets();
  static const int kActiveAssetsFieldNumber = 25;
  inline ::google::protobuf::int32 active_assets() const;
  inline void set_active_assets(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MemberFides)
 private:
  inline void set_has_mid();
  inline void clear_has_mid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_btd();
  inline void clear_has_btd();
  inline void set_has_city();
  inline void clear_has_city();
  inline void set_has_icon();
  inline void clear_has_icon();
  inline void set_has_invite();
  inline void clear_has_invite();
  inline void set_has_gp();
  inline void clear_has_gp();
  inline void set_has_sta();
  inline void clear_has_sta();
  inline void set_has_mtime();
  inline void clear_has_mtime();
  inline void set_has_email();
  inline void clear_has_email();
  inline void set_has_bindtime();
  inline void clear_has_bindtime();
  inline void set_has_tel();
  inline void clear_has_tel();
  inline void set_has_realname();
  inline void clear_has_realname();
  inline void set_has_identity();
  inline void clear_has_identity();
  inline void set_has_yellowvip();
  inline void clear_has_yellowvip();
  inline void set_has_isyearvip();
  inline void clear_has_isyearvip();
  inline void set_has_passwd();
  inline void clear_has_passwd();
  inline void set_has_salt();
  inline void clear_has_salt();
  inline void set_has_lgtm();
  inline void clear_has_lgtm();
  inline void set_has_lxlg();
  inline void clear_has_lxlg();
  inline void set_has_qq();
  inline void clear_has_qq();
  inline void set_has_address();
  inline void clear_has_address();
  inline void set_has_regip();
  inline void clear_has_regip();
  inline void set_has_active_assets();
  inline void clear_has_active_assets();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::int32 mid_;
  ::google::protobuf::int32 sex_;
  ::std::string* btd_;
  ::std::string* city_;
  ::std::string* icon_;
  ::google::protobuf::int32 invite_;
  ::google::protobuf::int32 gp_;
  ::google::protobuf::int64 mtime_;
  ::google::protobuf::int32 sta_;
  ::google::protobuf::int32 bindtime_;
  ::std::string* email_;
  ::std::string* tel_;
  ::std::string* realname_;
  ::std::string* identity_;
  ::google::protobuf::int32 yellowvip_;
  ::google::protobuf::int32 isyearvip_;
  ::std::string* passwd_;
  ::std::string* salt_;
  ::google::protobuf::int32 lgtm_;
  ::google::protobuf::int32 lxlg_;
  ::std::string* qq_;
  ::std::string* address_;
  ::google::protobuf::int64 regip_;
  ::google::protobuf::int32 active_assets_;
  friend void  protobuf_AddDesc_memberfides_2eproto();
  friend void protobuf_AssignDesc_memberfides_2eproto();
  friend void protobuf_ShutdownFile_memberfides_2eproto();

  void InitAsDefaultInstance();
  static MemberFides* default_instance_;
};
// ===================================================================


// ===================================================================

// MemberFides

// required int32 mid = 1;
inline bool MemberFides::has_mid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MemberFides::set_has_mid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MemberFides::clear_has_mid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MemberFides::clear_mid() {
  mid_ = 0;
  clear_has_mid();
}
inline ::google::protobuf::int32 MemberFides::mid() const {
  // @@protoc_insertion_point(field_get:MemberFides.mid)
  return mid_;
}
inline void MemberFides::set_mid(::google::protobuf::int32 value) {
  set_has_mid();
  mid_ = value;
  // @@protoc_insertion_point(field_set:MemberFides.mid)
}

// required string name = 2;
inline bool MemberFides::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MemberFides::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MemberFides::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MemberFides::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& MemberFides::name() const {
  // @@protoc_insertion_point(field_get:MemberFides.name)
  return *name_;
}
inline void MemberFides::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:MemberFides.name)
}
inline void MemberFides::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:MemberFides.name)
}
inline void MemberFides::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MemberFides.name)
}
inline ::std::string* MemberFides::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MemberFides.name)
  return name_;
}
inline ::std::string* MemberFides::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MemberFides::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MemberFides.name)
}

// required int32 sex = 3;
inline bool MemberFides::has_sex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MemberFides::set_has_sex() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MemberFides::clear_has_sex() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MemberFides::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 MemberFides::sex() const {
  // @@protoc_insertion_point(field_get:MemberFides.sex)
  return sex_;
}
inline void MemberFides::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
  // @@protoc_insertion_point(field_set:MemberFides.sex)
}

// required string btd = 4;
inline bool MemberFides::has_btd() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MemberFides::set_has_btd() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MemberFides::clear_has_btd() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MemberFides::clear_btd() {
  if (btd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    btd_->clear();
  }
  clear_has_btd();
}
inline const ::std::string& MemberFides::btd() const {
  // @@protoc_insertion_point(field_get:MemberFides.btd)
  return *btd_;
}
inline void MemberFides::set_btd(const ::std::string& value) {
  set_has_btd();
  if (btd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    btd_ = new ::std::string;
  }
  btd_->assign(value);
  // @@protoc_insertion_point(field_set:MemberFides.btd)
}
inline void MemberFides::set_btd(const char* value) {
  set_has_btd();
  if (btd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    btd_ = new ::std::string;
  }
  btd_->assign(value);
  // @@protoc_insertion_point(field_set_char:MemberFides.btd)
}
inline void MemberFides::set_btd(const char* value, size_t size) {
  set_has_btd();
  if (btd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    btd_ = new ::std::string;
  }
  btd_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MemberFides.btd)
}
inline ::std::string* MemberFides::mutable_btd() {
  set_has_btd();
  if (btd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    btd_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MemberFides.btd)
  return btd_;
}
inline ::std::string* MemberFides::release_btd() {
  clear_has_btd();
  if (btd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = btd_;
    btd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MemberFides::set_allocated_btd(::std::string* btd) {
  if (btd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete btd_;
  }
  if (btd) {
    set_has_btd();
    btd_ = btd;
  } else {
    clear_has_btd();
    btd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MemberFides.btd)
}

// required string city = 5;
inline bool MemberFides::has_city() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MemberFides::set_has_city() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MemberFides::clear_has_city() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MemberFides::clear_city() {
  if (city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    city_->clear();
  }
  clear_has_city();
}
inline const ::std::string& MemberFides::city() const {
  // @@protoc_insertion_point(field_get:MemberFides.city)
  return *city_;
}
inline void MemberFides::set_city(const ::std::string& value) {
  set_has_city();
  if (city_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    city_ = new ::std::string;
  }
  city_->assign(value);
  // @@protoc_insertion_point(field_set:MemberFides.city)
}
inline void MemberFides::set_city(const char* value) {
  set_has_city();
  if (city_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    city_ = new ::std::string;
  }
  city_->assign(value);
  // @@protoc_insertion_point(field_set_char:MemberFides.city)
}
inline void MemberFides::set_city(const char* value, size_t size) {
  set_has_city();
  if (city_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    city_ = new ::std::string;
  }
  city_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MemberFides.city)
}
inline ::std::string* MemberFides::mutable_city() {
  set_has_city();
  if (city_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    city_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MemberFides.city)
  return city_;
}
inline ::std::string* MemberFides::release_city() {
  clear_has_city();
  if (city_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = city_;
    city_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MemberFides::set_allocated_city(::std::string* city) {
  if (city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete city_;
  }
  if (city) {
    set_has_city();
    city_ = city;
  } else {
    clear_has_city();
    city_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MemberFides.city)
}

// required string icon = 6;
inline bool MemberFides::has_icon() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MemberFides::set_has_icon() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MemberFides::clear_has_icon() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MemberFides::clear_icon() {
  if (icon_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    icon_->clear();
  }
  clear_has_icon();
}
inline const ::std::string& MemberFides::icon() const {
  // @@protoc_insertion_point(field_get:MemberFides.icon)
  return *icon_;
}
inline void MemberFides::set_icon(const ::std::string& value) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
  // @@protoc_insertion_point(field_set:MemberFides.icon)
}
inline void MemberFides::set_icon(const char* value) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
  // @@protoc_insertion_point(field_set_char:MemberFides.icon)
}
inline void MemberFides::set_icon(const char* value, size_t size) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    icon_ = new ::std::string;
  }
  icon_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MemberFides.icon)
}
inline ::std::string* MemberFides::mutable_icon() {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    icon_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MemberFides.icon)
  return icon_;
}
inline ::std::string* MemberFides::release_icon() {
  clear_has_icon();
  if (icon_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = icon_;
    icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MemberFides::set_allocated_icon(::std::string* icon) {
  if (icon_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete icon_;
  }
  if (icon) {
    set_has_icon();
    icon_ = icon;
  } else {
    clear_has_icon();
    icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MemberFides.icon)
}

// required int32 invite = 7;
inline bool MemberFides::has_invite() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MemberFides::set_has_invite() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MemberFides::clear_has_invite() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MemberFides::clear_invite() {
  invite_ = 0;
  clear_has_invite();
}
inline ::google::protobuf::int32 MemberFides::invite() const {
  // @@protoc_insertion_point(field_get:MemberFides.invite)
  return invite_;
}
inline void MemberFides::set_invite(::google::protobuf::int32 value) {
  set_has_invite();
  invite_ = value;
  // @@protoc_insertion_point(field_set:MemberFides.invite)
}

// required int32 gp = 8;
inline bool MemberFides::has_gp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MemberFides::set_has_gp() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MemberFides::clear_has_gp() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MemberFides::clear_gp() {
  gp_ = 0;
  clear_has_gp();
}
inline ::google::protobuf::int32 MemberFides::gp() const {
  // @@protoc_insertion_point(field_get:MemberFides.gp)
  return gp_;
}
inline void MemberFides::set_gp(::google::protobuf::int32 value) {
  set_has_gp();
  gp_ = value;
  // @@protoc_insertion_point(field_set:MemberFides.gp)
}

// required int32 sta = 9;
inline bool MemberFides::has_sta() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MemberFides::set_has_sta() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MemberFides::clear_has_sta() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MemberFides::clear_sta() {
  sta_ = 0;
  clear_has_sta();
}
inline ::google::protobuf::int32 MemberFides::sta() const {
  // @@protoc_insertion_point(field_get:MemberFides.sta)
  return sta_;
}
inline void MemberFides::set_sta(::google::protobuf::int32 value) {
  set_has_sta();
  sta_ = value;
  // @@protoc_insertion_point(field_set:MemberFides.sta)
}

// required int64 mtime = 10;
inline bool MemberFides::has_mtime() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MemberFides::set_has_mtime() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MemberFides::clear_has_mtime() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MemberFides::clear_mtime() {
  mtime_ = GOOGLE_LONGLONG(0);
  clear_has_mtime();
}
inline ::google::protobuf::int64 MemberFides::mtime() const {
  // @@protoc_insertion_point(field_get:MemberFides.mtime)
  return mtime_;
}
inline void MemberFides::set_mtime(::google::protobuf::int64 value) {
  set_has_mtime();
  mtime_ = value;
  // @@protoc_insertion_point(field_set:MemberFides.mtime)
}

// required string email = 12;
inline bool MemberFides::has_email() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MemberFides::set_has_email() {
  _has_bits_[0] |= 0x00000400u;
}
inline void MemberFides::clear_has_email() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void MemberFides::clear_email() {
  if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_->clear();
  }
  clear_has_email();
}
inline const ::std::string& MemberFides::email() const {
  // @@protoc_insertion_point(field_get:MemberFides.email)
  return *email_;
}
inline void MemberFides::set_email(const ::std::string& value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_ = new ::std::string;
  }
  email_->assign(value);
  // @@protoc_insertion_point(field_set:MemberFides.email)
}
inline void MemberFides::set_email(const char* value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_ = new ::std::string;
  }
  email_->assign(value);
  // @@protoc_insertion_point(field_set_char:MemberFides.email)
}
inline void MemberFides::set_email(const char* value, size_t size) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_ = new ::std::string;
  }
  email_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MemberFides.email)
}
inline ::std::string* MemberFides::mutable_email() {
  set_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MemberFides.email)
  return email_;
}
inline ::std::string* MemberFides::release_email() {
  clear_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = email_;
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MemberFides::set_allocated_email(::std::string* email) {
  if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete email_;
  }
  if (email) {
    set_has_email();
    email_ = email;
  } else {
    clear_has_email();
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MemberFides.email)
}

// required int32 bindtime = 11;
inline bool MemberFides::has_bindtime() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void MemberFides::set_has_bindtime() {
  _has_bits_[0] |= 0x00000800u;
}
inline void MemberFides::clear_has_bindtime() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void MemberFides::clear_bindtime() {
  bindtime_ = 0;
  clear_has_bindtime();
}
inline ::google::protobuf::int32 MemberFides::bindtime() const {
  // @@protoc_insertion_point(field_get:MemberFides.bindtime)
  return bindtime_;
}
inline void MemberFides::set_bindtime(::google::protobuf::int32 value) {
  set_has_bindtime();
  bindtime_ = value;
  // @@protoc_insertion_point(field_set:MemberFides.bindtime)
}

// required string tel = 13;
inline bool MemberFides::has_tel() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void MemberFides::set_has_tel() {
  _has_bits_[0] |= 0x00001000u;
}
inline void MemberFides::clear_has_tel() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void MemberFides::clear_tel() {
  if (tel_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tel_->clear();
  }
  clear_has_tel();
}
inline const ::std::string& MemberFides::tel() const {
  // @@protoc_insertion_point(field_get:MemberFides.tel)
  return *tel_;
}
inline void MemberFides::set_tel(const ::std::string& value) {
  set_has_tel();
  if (tel_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tel_ = new ::std::string;
  }
  tel_->assign(value);
  // @@protoc_insertion_point(field_set:MemberFides.tel)
}
inline void MemberFides::set_tel(const char* value) {
  set_has_tel();
  if (tel_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tel_ = new ::std::string;
  }
  tel_->assign(value);
  // @@protoc_insertion_point(field_set_char:MemberFides.tel)
}
inline void MemberFides::set_tel(const char* value, size_t size) {
  set_has_tel();
  if (tel_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tel_ = new ::std::string;
  }
  tel_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MemberFides.tel)
}
inline ::std::string* MemberFides::mutable_tel() {
  set_has_tel();
  if (tel_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tel_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MemberFides.tel)
  return tel_;
}
inline ::std::string* MemberFides::release_tel() {
  clear_has_tel();
  if (tel_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = tel_;
    tel_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MemberFides::set_allocated_tel(::std::string* tel) {
  if (tel_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tel_;
  }
  if (tel) {
    set_has_tel();
    tel_ = tel;
  } else {
    clear_has_tel();
    tel_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MemberFides.tel)
}

// required string realname = 14;
inline bool MemberFides::has_realname() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void MemberFides::set_has_realname() {
  _has_bits_[0] |= 0x00002000u;
}
inline void MemberFides::clear_has_realname() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void MemberFides::clear_realname() {
  if (realname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    realname_->clear();
  }
  clear_has_realname();
}
inline const ::std::string& MemberFides::realname() const {
  // @@protoc_insertion_point(field_get:MemberFides.realname)
  return *realname_;
}
inline void MemberFides::set_realname(const ::std::string& value) {
  set_has_realname();
  if (realname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    realname_ = new ::std::string;
  }
  realname_->assign(value);
  // @@protoc_insertion_point(field_set:MemberFides.realname)
}
inline void MemberFides::set_realname(const char* value) {
  set_has_realname();
  if (realname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    realname_ = new ::std::string;
  }
  realname_->assign(value);
  // @@protoc_insertion_point(field_set_char:MemberFides.realname)
}
inline void MemberFides::set_realname(const char* value, size_t size) {
  set_has_realname();
  if (realname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    realname_ = new ::std::string;
  }
  realname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MemberFides.realname)
}
inline ::std::string* MemberFides::mutable_realname() {
  set_has_realname();
  if (realname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    realname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MemberFides.realname)
  return realname_;
}
inline ::std::string* MemberFides::release_realname() {
  clear_has_realname();
  if (realname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = realname_;
    realname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MemberFides::set_allocated_realname(::std::string* realname) {
  if (realname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete realname_;
  }
  if (realname) {
    set_has_realname();
    realname_ = realname;
  } else {
    clear_has_realname();
    realname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MemberFides.realname)
}

// required string identity = 15;
inline bool MemberFides::has_identity() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void MemberFides::set_has_identity() {
  _has_bits_[0] |= 0x00004000u;
}
inline void MemberFides::clear_has_identity() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void MemberFides::clear_identity() {
  if (identity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identity_->clear();
  }
  clear_has_identity();
}
inline const ::std::string& MemberFides::identity() const {
  // @@protoc_insertion_point(field_get:MemberFides.identity)
  return *identity_;
}
inline void MemberFides::set_identity(const ::std::string& value) {
  set_has_identity();
  if (identity_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identity_ = new ::std::string;
  }
  identity_->assign(value);
  // @@protoc_insertion_point(field_set:MemberFides.identity)
}
inline void MemberFides::set_identity(const char* value) {
  set_has_identity();
  if (identity_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identity_ = new ::std::string;
  }
  identity_->assign(value);
  // @@protoc_insertion_point(field_set_char:MemberFides.identity)
}
inline void MemberFides::set_identity(const char* value, size_t size) {
  set_has_identity();
  if (identity_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identity_ = new ::std::string;
  }
  identity_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MemberFides.identity)
}
inline ::std::string* MemberFides::mutable_identity() {
  set_has_identity();
  if (identity_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identity_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MemberFides.identity)
  return identity_;
}
inline ::std::string* MemberFides::release_identity() {
  clear_has_identity();
  if (identity_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = identity_;
    identity_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MemberFides::set_allocated_identity(::std::string* identity) {
  if (identity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete identity_;
  }
  if (identity) {
    set_has_identity();
    identity_ = identity;
  } else {
    clear_has_identity();
    identity_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MemberFides.identity)
}

// required int32 yellowvip = 16;
inline bool MemberFides::has_yellowvip() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void MemberFides::set_has_yellowvip() {
  _has_bits_[0] |= 0x00008000u;
}
inline void MemberFides::clear_has_yellowvip() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void MemberFides::clear_yellowvip() {
  yellowvip_ = 0;
  clear_has_yellowvip();
}
inline ::google::protobuf::int32 MemberFides::yellowvip() const {
  // @@protoc_insertion_point(field_get:MemberFides.yellowvip)
  return yellowvip_;
}
inline void MemberFides::set_yellowvip(::google::protobuf::int32 value) {
  set_has_yellowvip();
  yellowvip_ = value;
  // @@protoc_insertion_point(field_set:MemberFides.yellowvip)
}

// required int32 isyearvip = 17;
inline bool MemberFides::has_isyearvip() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void MemberFides::set_has_isyearvip() {
  _has_bits_[0] |= 0x00010000u;
}
inline void MemberFides::clear_has_isyearvip() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void MemberFides::clear_isyearvip() {
  isyearvip_ = 0;
  clear_has_isyearvip();
}
inline ::google::protobuf::int32 MemberFides::isyearvip() const {
  // @@protoc_insertion_point(field_get:MemberFides.isyearvip)
  return isyearvip_;
}
inline void MemberFides::set_isyearvip(::google::protobuf::int32 value) {
  set_has_isyearvip();
  isyearvip_ = value;
  // @@protoc_insertion_point(field_set:MemberFides.isyearvip)
}

// required string passwd = 18;
inline bool MemberFides::has_passwd() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void MemberFides::set_has_passwd() {
  _has_bits_[0] |= 0x00020000u;
}
inline void MemberFides::clear_has_passwd() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void MemberFides::clear_passwd() {
  if (passwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_->clear();
  }
  clear_has_passwd();
}
inline const ::std::string& MemberFides::passwd() const {
  // @@protoc_insertion_point(field_get:MemberFides.passwd)
  return *passwd_;
}
inline void MemberFides::set_passwd(const ::std::string& value) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(value);
  // @@protoc_insertion_point(field_set:MemberFides.passwd)
}
inline void MemberFides::set_passwd(const char* value) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(value);
  // @@protoc_insertion_point(field_set_char:MemberFides.passwd)
}
inline void MemberFides::set_passwd(const char* value, size_t size) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MemberFides.passwd)
}
inline ::std::string* MemberFides::mutable_passwd() {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MemberFides.passwd)
  return passwd_;
}
inline ::std::string* MemberFides::release_passwd() {
  clear_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = passwd_;
    passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MemberFides::set_allocated_passwd(::std::string* passwd) {
  if (passwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete passwd_;
  }
  if (passwd) {
    set_has_passwd();
    passwd_ = passwd;
  } else {
    clear_has_passwd();
    passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MemberFides.passwd)
}

// required string salt = 19;
inline bool MemberFides::has_salt() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void MemberFides::set_has_salt() {
  _has_bits_[0] |= 0x00040000u;
}
inline void MemberFides::clear_has_salt() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void MemberFides::clear_salt() {
  if (salt_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    salt_->clear();
  }
  clear_has_salt();
}
inline const ::std::string& MemberFides::salt() const {
  // @@protoc_insertion_point(field_get:MemberFides.salt)
  return *salt_;
}
inline void MemberFides::set_salt(const ::std::string& value) {
  set_has_salt();
  if (salt_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    salt_ = new ::std::string;
  }
  salt_->assign(value);
  // @@protoc_insertion_point(field_set:MemberFides.salt)
}
inline void MemberFides::set_salt(const char* value) {
  set_has_salt();
  if (salt_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    salt_ = new ::std::string;
  }
  salt_->assign(value);
  // @@protoc_insertion_point(field_set_char:MemberFides.salt)
}
inline void MemberFides::set_salt(const char* value, size_t size) {
  set_has_salt();
  if (salt_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    salt_ = new ::std::string;
  }
  salt_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MemberFides.salt)
}
inline ::std::string* MemberFides::mutable_salt() {
  set_has_salt();
  if (salt_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    salt_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MemberFides.salt)
  return salt_;
}
inline ::std::string* MemberFides::release_salt() {
  clear_has_salt();
  if (salt_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = salt_;
    salt_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MemberFides::set_allocated_salt(::std::string* salt) {
  if (salt_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete salt_;
  }
  if (salt) {
    set_has_salt();
    salt_ = salt;
  } else {
    clear_has_salt();
    salt_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MemberFides.salt)
}

// required int32 lgtm = 20;
inline bool MemberFides::has_lgtm() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void MemberFides::set_has_lgtm() {
  _has_bits_[0] |= 0x00080000u;
}
inline void MemberFides::clear_has_lgtm() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void MemberFides::clear_lgtm() {
  lgtm_ = 0;
  clear_has_lgtm();
}
inline ::google::protobuf::int32 MemberFides::lgtm() const {
  // @@protoc_insertion_point(field_get:MemberFides.lgtm)
  return lgtm_;
}
inline void MemberFides::set_lgtm(::google::protobuf::int32 value) {
  set_has_lgtm();
  lgtm_ = value;
  // @@protoc_insertion_point(field_set:MemberFides.lgtm)
}

// required int32 lxlg = 21;
inline bool MemberFides::has_lxlg() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void MemberFides::set_has_lxlg() {
  _has_bits_[0] |= 0x00100000u;
}
inline void MemberFides::clear_has_lxlg() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void MemberFides::clear_lxlg() {
  lxlg_ = 0;
  clear_has_lxlg();
}
inline ::google::protobuf::int32 MemberFides::lxlg() const {
  // @@protoc_insertion_point(field_get:MemberFides.lxlg)
  return lxlg_;
}
inline void MemberFides::set_lxlg(::google::protobuf::int32 value) {
  set_has_lxlg();
  lxlg_ = value;
  // @@protoc_insertion_point(field_set:MemberFides.lxlg)
}

// required string qq = 22;
inline bool MemberFides::has_qq() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void MemberFides::set_has_qq() {
  _has_bits_[0] |= 0x00200000u;
}
inline void MemberFides::clear_has_qq() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void MemberFides::clear_qq() {
  if (qq_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    qq_->clear();
  }
  clear_has_qq();
}
inline const ::std::string& MemberFides::qq() const {
  // @@protoc_insertion_point(field_get:MemberFides.qq)
  return *qq_;
}
inline void MemberFides::set_qq(const ::std::string& value) {
  set_has_qq();
  if (qq_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    qq_ = new ::std::string;
  }
  qq_->assign(value);
  // @@protoc_insertion_point(field_set:MemberFides.qq)
}
inline void MemberFides::set_qq(const char* value) {
  set_has_qq();
  if (qq_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    qq_ = new ::std::string;
  }
  qq_->assign(value);
  // @@protoc_insertion_point(field_set_char:MemberFides.qq)
}
inline void MemberFides::set_qq(const char* value, size_t size) {
  set_has_qq();
  if (qq_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    qq_ = new ::std::string;
  }
  qq_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MemberFides.qq)
}
inline ::std::string* MemberFides::mutable_qq() {
  set_has_qq();
  if (qq_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    qq_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MemberFides.qq)
  return qq_;
}
inline ::std::string* MemberFides::release_qq() {
  clear_has_qq();
  if (qq_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = qq_;
    qq_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MemberFides::set_allocated_qq(::std::string* qq) {
  if (qq_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete qq_;
  }
  if (qq) {
    set_has_qq();
    qq_ = qq;
  } else {
    clear_has_qq();
    qq_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MemberFides.qq)
}

// required string address = 23;
inline bool MemberFides::has_address() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void MemberFides::set_has_address() {
  _has_bits_[0] |= 0x00400000u;
}
inline void MemberFides::clear_has_address() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void MemberFides::clear_address() {
  if (address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    address_->clear();
  }
  clear_has_address();
}
inline const ::std::string& MemberFides::address() const {
  // @@protoc_insertion_point(field_get:MemberFides.address)
  return *address_;
}
inline void MemberFides::set_address(const ::std::string& value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    address_ = new ::std::string;
  }
  address_->assign(value);
  // @@protoc_insertion_point(field_set:MemberFides.address)
}
inline void MemberFides::set_address(const char* value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    address_ = new ::std::string;
  }
  address_->assign(value);
  // @@protoc_insertion_point(field_set_char:MemberFides.address)
}
inline void MemberFides::set_address(const char* value, size_t size) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    address_ = new ::std::string;
  }
  address_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MemberFides.address)
}
inline ::std::string* MemberFides::mutable_address() {
  set_has_address();
  if (address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    address_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MemberFides.address)
  return address_;
}
inline ::std::string* MemberFides::release_address() {
  clear_has_address();
  if (address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = address_;
    address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MemberFides::set_allocated_address(::std::string* address) {
  if (address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete address_;
  }
  if (address) {
    set_has_address();
    address_ = address;
  } else {
    clear_has_address();
    address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MemberFides.address)
}

// required int64 regip = 24;
inline bool MemberFides::has_regip() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void MemberFides::set_has_regip() {
  _has_bits_[0] |= 0x00800000u;
}
inline void MemberFides::clear_has_regip() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void MemberFides::clear_regip() {
  regip_ = GOOGLE_LONGLONG(0);
  clear_has_regip();
}
inline ::google::protobuf::int64 MemberFides::regip() const {
  // @@protoc_insertion_point(field_get:MemberFides.regip)
  return regip_;
}
inline void MemberFides::set_regip(::google::protobuf::int64 value) {
  set_has_regip();
  regip_ = value;
  // @@protoc_insertion_point(field_set:MemberFides.regip)
}

// required int32 active_assets = 25;
inline bool MemberFides::has_active_assets() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void MemberFides::set_has_active_assets() {
  _has_bits_[0] |= 0x01000000u;
}
inline void MemberFides::clear_has_active_assets() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void MemberFides::clear_active_assets() {
  active_assets_ = 0;
  clear_has_active_assets();
}
inline ::google::protobuf::int32 MemberFides::active_assets() const {
  // @@protoc_insertion_point(field_get:MemberFides.active_assets)
  return active_assets_;
}
inline void MemberFides::set_active_assets(::google::protobuf::int32 value) {
  set_has_active_assets();
  active_assets_ = value;
  // @@protoc_insertion_point(field_set:MemberFides.active_assets)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_memberfides_2eproto__INCLUDED
