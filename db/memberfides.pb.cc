// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: memberfides.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "memberfides.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* MemberFides_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MemberFides_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_memberfides_2eproto() {
  protobuf_AddDesc_memberfides_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "memberfides.proto");
  GOOGLE_CHECK(file != NULL);
  MemberFides_descriptor_ = file->message_type(0);
  static const int MemberFides_offsets_[25] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberFides, mid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberFides, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberFides, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberFides, btd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberFides, city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberFides, icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberFides, invite_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberFides, gp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberFides, sta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberFides, mtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberFides, email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberFides, bindtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberFides, tel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberFides, realname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberFides, identity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberFides, yellowvip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberFides, isyearvip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberFides, passwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberFides, salt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberFides, lgtm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberFides, lxlg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberFides, qq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberFides, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberFides, regip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberFides, active_assets_),
  };
  MemberFides_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MemberFides_descriptor_,
      MemberFides::default_instance_,
      MemberFides_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberFides, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberFides, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MemberFides));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_memberfides_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MemberFides_descriptor_, &MemberFides::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_memberfides_2eproto() {
  delete MemberFides::default_instance_;
  delete MemberFides_reflection_;
}

void protobuf_AddDesc_memberfides_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021memberfides.proto\"\213\003\n\013MemberFides\022\013\n\003m"
    "id\030\001 \002(\005\022\014\n\004name\030\002 \002(\t\022\013\n\003sex\030\003 \002(\005\022\013\n\003b"
    "td\030\004 \002(\t\022\014\n\004city\030\005 \002(\t\022\014\n\004icon\030\006 \002(\t\022\016\n\006"
    "invite\030\007 \002(\005\022\n\n\002gp\030\010 \002(\005\022\013\n\003sta\030\t \002(\005\022\r\n"
    "\005mtime\030\n \002(\003\022\r\n\005email\030\014 \002(\t\022\020\n\010bindtime\030"
    "\013 \002(\005\022\013\n\003tel\030\r \002(\t\022\020\n\010realname\030\016 \002(\t\022\020\n\010"
    "identity\030\017 \002(\t\022\021\n\tyellowvip\030\020 \002(\005\022\021\n\tisy"
    "earvip\030\021 \002(\005\022\016\n\006passwd\030\022 \002(\t\022\014\n\004salt\030\023 \002"
    "(\t\022\014\n\004lgtm\030\024 \002(\005\022\014\n\004lxlg\030\025 \002(\005\022\n\n\002qq\030\026 \002"
    "(\t\022\017\n\007address\030\027 \002(\t\022\r\n\005regip\030\030 \002(\003\022\025\n\rac"
    "tive_assets\030\031 \002(\005", 417);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "memberfides.proto", &protobuf_RegisterTypes);
  MemberFides::default_instance_ = new MemberFides();
  MemberFides::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_memberfides_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_memberfides_2eproto {
  StaticDescriptorInitializer_memberfides_2eproto() {
    protobuf_AddDesc_memberfides_2eproto();
  }
} static_descriptor_initializer_memberfides_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int MemberFides::kMidFieldNumber;
const int MemberFides::kNameFieldNumber;
const int MemberFides::kSexFieldNumber;
const int MemberFides::kBtdFieldNumber;
const int MemberFides::kCityFieldNumber;
const int MemberFides::kIconFieldNumber;
const int MemberFides::kInviteFieldNumber;
const int MemberFides::kGpFieldNumber;
const int MemberFides::kStaFieldNumber;
const int MemberFides::kMtimeFieldNumber;
const int MemberFides::kEmailFieldNumber;
const int MemberFides::kBindtimeFieldNumber;
const int MemberFides::kTelFieldNumber;
const int MemberFides::kRealnameFieldNumber;
const int MemberFides::kIdentityFieldNumber;
const int MemberFides::kYellowvipFieldNumber;
const int MemberFides::kIsyearvipFieldNumber;
const int MemberFides::kPasswdFieldNumber;
const int MemberFides::kSaltFieldNumber;
const int MemberFides::kLgtmFieldNumber;
const int MemberFides::kLxlgFieldNumber;
const int MemberFides::kQqFieldNumber;
const int MemberFides::kAddressFieldNumber;
const int MemberFides::kRegipFieldNumber;
const int MemberFides::kActiveAssetsFieldNumber;
#endif  // !_MSC_VER

MemberFides::MemberFides()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MemberFides)
}

void MemberFides::InitAsDefaultInstance() {
}

MemberFides::MemberFides(const MemberFides& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MemberFides)
}

void MemberFides::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mid_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sex_ = 0;
  btd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  city_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  invite_ = 0;
  gp_ = 0;
  sta_ = 0;
  mtime_ = GOOGLE_LONGLONG(0);
  email_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bindtime_ = 0;
  tel_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  realname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  identity_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  yellowvip_ = 0;
  isyearvip_ = 0;
  passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  salt_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lgtm_ = 0;
  lxlg_ = 0;
  qq_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  regip_ = GOOGLE_LONGLONG(0);
  active_assets_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MemberFides::~MemberFides() {
  // @@protoc_insertion_point(destructor:MemberFides)
  SharedDtor();
}

void MemberFides::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (btd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete btd_;
  }
  if (city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete city_;
  }
  if (icon_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete icon_;
  }
  if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete email_;
  }
  if (tel_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tel_;
  }
  if (realname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete realname_;
  }
  if (identity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete identity_;
  }
  if (passwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete passwd_;
  }
  if (salt_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete salt_;
  }
  if (qq_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete qq_;
  }
  if (address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete address_;
  }
  if (this != default_instance_) {
  }
}

void MemberFides::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemberFides::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MemberFides_descriptor_;
}

const MemberFides& MemberFides::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_memberfides_2eproto();
  return *default_instance_;
}

MemberFides* MemberFides::default_instance_ = NULL;

MemberFides* MemberFides::New() const {
  return new MemberFides;
}

void MemberFides::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MemberFides*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(mid_, sex_);
    ZR_(invite_, gp_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_btd()) {
      if (btd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        btd_->clear();
      }
    }
    if (has_city()) {
      if (city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        city_->clear();
      }
    }
    if (has_icon()) {
      if (icon_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        icon_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(mtime_, bindtime_);
    if (has_email()) {
      if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        email_->clear();
      }
    }
    if (has_tel()) {
      if (tel_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tel_->clear();
      }
    }
    if (has_realname()) {
      if (realname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        realname_->clear();
      }
    }
    if (has_identity()) {
      if (identity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        identity_->clear();
      }
    }
    yellowvip_ = 0;
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(lgtm_, lxlg_);
    isyearvip_ = 0;
    if (has_passwd()) {
      if (passwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        passwd_->clear();
      }
    }
    if (has_salt()) {
      if (salt_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        salt_->clear();
      }
    }
    if (has_qq()) {
      if (qq_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        qq_->clear();
      }
    }
    if (has_address()) {
      if (address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        address_->clear();
      }
    }
    regip_ = GOOGLE_LONGLONG(0);
  }
  active_assets_ = 0;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MemberFides::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MemberFides)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 mid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mid_)));
          set_has_mid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sex;
        break;
      }

      // required int32 sex = 3;
      case 3: {
        if (tag == 24) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_btd;
        break;
      }

      // required string btd = 4;
      case 4: {
        if (tag == 34) {
         parse_btd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_btd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->btd().data(), this->btd().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "btd");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_city;
        break;
      }

      // required string city = 5;
      case 5: {
        if (tag == 42) {
         parse_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_city()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->city().data(), this->city().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "city");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_icon;
        break;
      }

      // required string icon = 6;
      case 6: {
        if (tag == 50) {
         parse_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->icon().data(), this->icon().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "icon");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_invite;
        break;
      }

      // required int32 invite = 7;
      case 7: {
        if (tag == 56) {
         parse_invite:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &invite_)));
          set_has_invite();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_gp;
        break;
      }

      // required int32 gp = 8;
      case 8: {
        if (tag == 64) {
         parse_gp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gp_)));
          set_has_gp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_sta;
        break;
      }

      // required int32 sta = 9;
      case 9: {
        if (tag == 72) {
         parse_sta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sta_)));
          set_has_sta();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_mtime;
        break;
      }

      // required int64 mtime = 10;
      case 10: {
        if (tag == 80) {
         parse_mtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mtime_)));
          set_has_mtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_bindtime;
        break;
      }

      // required int32 bindtime = 11;
      case 11: {
        if (tag == 88) {
         parse_bindtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bindtime_)));
          set_has_bindtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_email;
        break;
      }

      // required string email = 12;
      case 12: {
        if (tag == 98) {
         parse_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->email().data(), this->email().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "email");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_tel;
        break;
      }

      // required string tel = 13;
      case 13: {
        if (tag == 106) {
         parse_tel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tel().data(), this->tel().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tel");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_realname;
        break;
      }

      // required string realname = 14;
      case 14: {
        if (tag == 114) {
         parse_realname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_realname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->realname().data(), this->realname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "realname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_identity;
        break;
      }

      // required string identity = 15;
      case 15: {
        if (tag == 122) {
         parse_identity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_identity()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->identity().data(), this->identity().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "identity");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_yellowvip;
        break;
      }

      // required int32 yellowvip = 16;
      case 16: {
        if (tag == 128) {
         parse_yellowvip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &yellowvip_)));
          set_has_yellowvip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_isyearvip;
        break;
      }

      // required int32 isyearvip = 17;
      case 17: {
        if (tag == 136) {
         parse_isyearvip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isyearvip_)));
          set_has_isyearvip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_passwd;
        break;
      }

      // required string passwd = 18;
      case 18: {
        if (tag == 146) {
         parse_passwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->passwd().data(), this->passwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "passwd");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_salt;
        break;
      }

      // required string salt = 19;
      case 19: {
        if (tag == 154) {
         parse_salt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_salt()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->salt().data(), this->salt().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "salt");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_lgtm;
        break;
      }

      // required int32 lgtm = 20;
      case 20: {
        if (tag == 160) {
         parse_lgtm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lgtm_)));
          set_has_lgtm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_lxlg;
        break;
      }

      // required int32 lxlg = 21;
      case 21: {
        if (tag == 168) {
         parse_lxlg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lxlg_)));
          set_has_lxlg();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_qq;
        break;
      }

      // required string qq = 22;
      case 22: {
        if (tag == 178) {
         parse_qq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_qq()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->qq().data(), this->qq().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "qq");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_address;
        break;
      }

      // required string address = 23;
      case 23: {
        if (tag == 186) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->address().data(), this->address().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "address");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_regip;
        break;
      }

      // required int64 regip = 24;
      case 24: {
        if (tag == 192) {
         parse_regip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &regip_)));
          set_has_regip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_active_assets;
        break;
      }

      // required int32 active_assets = 25;
      case 25: {
        if (tag == 200) {
         parse_active_assets:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &active_assets_)));
          set_has_active_assets();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MemberFides)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MemberFides)
  return false;
#undef DO_
}

void MemberFides::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MemberFides)
  // required int32 mid = 1;
  if (has_mid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mid(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // required int32 sex = 3;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sex(), output);
  }

  // required string btd = 4;
  if (has_btd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->btd().data(), this->btd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "btd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->btd(), output);
  }

  // required string city = 5;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "city");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->city(), output);
  }

  // required string icon = 6;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "icon");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->icon(), output);
  }

  // required int32 invite = 7;
  if (has_invite()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->invite(), output);
  }

  // required int32 gp = 8;
  if (has_gp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->gp(), output);
  }

  // required int32 sta = 9;
  if (has_sta()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->sta(), output);
  }

  // required int64 mtime = 10;
  if (has_mtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->mtime(), output);
  }

  // required int32 bindtime = 11;
  if (has_bindtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->bindtime(), output);
  }

  // required string email = 12;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "email");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->email(), output);
  }

  // required string tel = 13;
  if (has_tel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tel().data(), this->tel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tel");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->tel(), output);
  }

  // required string realname = 14;
  if (has_realname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->realname().data(), this->realname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "realname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->realname(), output);
  }

  // required string identity = 15;
  if (has_identity()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->identity().data(), this->identity().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "identity");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->identity(), output);
  }

  // required int32 yellowvip = 16;
  if (has_yellowvip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->yellowvip(), output);
  }

  // required int32 isyearvip = 17;
  if (has_isyearvip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->isyearvip(), output);
  }

  // required string passwd = 18;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "passwd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->passwd(), output);
  }

  // required string salt = 19;
  if (has_salt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->salt().data(), this->salt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "salt");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->salt(), output);
  }

  // required int32 lgtm = 20;
  if (has_lgtm()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->lgtm(), output);
  }

  // required int32 lxlg = 21;
  if (has_lxlg()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->lxlg(), output);
  }

  // required string qq = 22;
  if (has_qq()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->qq().data(), this->qq().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qq");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->qq(), output);
  }

  // required string address = 23;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      23, this->address(), output);
  }

  // required int64 regip = 24;
  if (has_regip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(24, this->regip(), output);
  }

  // required int32 active_assets = 25;
  if (has_active_assets()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->active_assets(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MemberFides)
}

::google::protobuf::uint8* MemberFides::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MemberFides)
  // required int32 mid = 1;
  if (has_mid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mid(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required int32 sex = 3;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sex(), target);
  }

  // required string btd = 4;
  if (has_btd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->btd().data(), this->btd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "btd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->btd(), target);
  }

  // required string city = 5;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "city");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->city(), target);
  }

  // required string icon = 6;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "icon");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->icon(), target);
  }

  // required int32 invite = 7;
  if (has_invite()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->invite(), target);
  }

  // required int32 gp = 8;
  if (has_gp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->gp(), target);
  }

  // required int32 sta = 9;
  if (has_sta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->sta(), target);
  }

  // required int64 mtime = 10;
  if (has_mtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->mtime(), target);
  }

  // required int32 bindtime = 11;
  if (has_bindtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->bindtime(), target);
  }

  // required string email = 12;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "email");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->email(), target);
  }

  // required string tel = 13;
  if (has_tel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tel().data(), this->tel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tel");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->tel(), target);
  }

  // required string realname = 14;
  if (has_realname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->realname().data(), this->realname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "realname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->realname(), target);
  }

  // required string identity = 15;
  if (has_identity()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->identity().data(), this->identity().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "identity");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->identity(), target);
  }

  // required int32 yellowvip = 16;
  if (has_yellowvip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->yellowvip(), target);
  }

  // required int32 isyearvip = 17;
  if (has_isyearvip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->isyearvip(), target);
  }

  // required string passwd = 18;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "passwd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->passwd(), target);
  }

  // required string salt = 19;
  if (has_salt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->salt().data(), this->salt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "salt");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->salt(), target);
  }

  // required int32 lgtm = 20;
  if (has_lgtm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->lgtm(), target);
  }

  // required int32 lxlg = 21;
  if (has_lxlg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->lxlg(), target);
  }

  // required string qq = 22;
  if (has_qq()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->qq().data(), this->qq().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qq");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->qq(), target);
  }

  // required string address = 23;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->address(), target);
  }

  // required int64 regip = 24;
  if (has_regip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(24, this->regip(), target);
  }

  // required int32 active_assets = 25;
  if (has_active_assets()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->active_assets(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MemberFides)
  return target;
}

int MemberFides::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 mid = 1;
    if (has_mid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mid());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 sex = 3;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

    // required string btd = 4;
    if (has_btd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->btd());
    }

    // required string city = 5;
    if (has_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->city());
    }

    // required string icon = 6;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon());
    }

    // required int32 invite = 7;
    if (has_invite()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->invite());
    }

    // required int32 gp = 8;
    if (has_gp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gp());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 sta = 9;
    if (has_sta()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sta());
    }

    // required int64 mtime = 10;
    if (has_mtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mtime());
    }

    // required string email = 12;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
    }

    // required int32 bindtime = 11;
    if (has_bindtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bindtime());
    }

    // required string tel = 13;
    if (has_tel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tel());
    }

    // required string realname = 14;
    if (has_realname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->realname());
    }

    // required string identity = 15;
    if (has_identity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->identity());
    }

    // required int32 yellowvip = 16;
    if (has_yellowvip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->yellowvip());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required int32 isyearvip = 17;
    if (has_isyearvip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isyearvip());
    }

    // required string passwd = 18;
    if (has_passwd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->passwd());
    }

    // required string salt = 19;
    if (has_salt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->salt());
    }

    // required int32 lgtm = 20;
    if (has_lgtm()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lgtm());
    }

    // required int32 lxlg = 21;
    if (has_lxlg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lxlg());
    }

    // required string qq = 22;
    if (has_qq()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->qq());
    }

    // required string address = 23;
    if (has_address()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address());
    }

    // required int64 regip = 24;
    if (has_regip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->regip());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required int32 active_assets = 25;
    if (has_active_assets()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->active_assets());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemberFides::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MemberFides* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MemberFides*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MemberFides::MergeFrom(const MemberFides& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mid()) {
      set_mid(from.mid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_btd()) {
      set_btd(from.btd());
    }
    if (from.has_city()) {
      set_city(from.city());
    }
    if (from.has_icon()) {
      set_icon(from.icon());
    }
    if (from.has_invite()) {
      set_invite(from.invite());
    }
    if (from.has_gp()) {
      set_gp(from.gp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_sta()) {
      set_sta(from.sta());
    }
    if (from.has_mtime()) {
      set_mtime(from.mtime());
    }
    if (from.has_email()) {
      set_email(from.email());
    }
    if (from.has_bindtime()) {
      set_bindtime(from.bindtime());
    }
    if (from.has_tel()) {
      set_tel(from.tel());
    }
    if (from.has_realname()) {
      set_realname(from.realname());
    }
    if (from.has_identity()) {
      set_identity(from.identity());
    }
    if (from.has_yellowvip()) {
      set_yellowvip(from.yellowvip());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_isyearvip()) {
      set_isyearvip(from.isyearvip());
    }
    if (from.has_passwd()) {
      set_passwd(from.passwd());
    }
    if (from.has_salt()) {
      set_salt(from.salt());
    }
    if (from.has_lgtm()) {
      set_lgtm(from.lgtm());
    }
    if (from.has_lxlg()) {
      set_lxlg(from.lxlg());
    }
    if (from.has_qq()) {
      set_qq(from.qq());
    }
    if (from.has_address()) {
      set_address(from.address());
    }
    if (from.has_regip()) {
      set_regip(from.regip());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_active_assets()) {
      set_active_assets(from.active_assets());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MemberFides::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemberFides::CopyFrom(const MemberFides& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemberFides::IsInitialized() const {
  if ((_has_bits_[0] & 0x01ffffff) != 0x01ffffff) return false;

  return true;
}

void MemberFides::Swap(MemberFides* other) {
  if (other != this) {
    std::swap(mid_, other->mid_);
    std::swap(name_, other->name_);
    std::swap(sex_, other->sex_);
    std::swap(btd_, other->btd_);
    std::swap(city_, other->city_);
    std::swap(icon_, other->icon_);
    std::swap(invite_, other->invite_);
    std::swap(gp_, other->gp_);
    std::swap(sta_, other->sta_);
    std::swap(mtime_, other->mtime_);
    std::swap(email_, other->email_);
    std::swap(bindtime_, other->bindtime_);
    std::swap(tel_, other->tel_);
    std::swap(realname_, other->realname_);
    std::swap(identity_, other->identity_);
    std::swap(yellowvip_, other->yellowvip_);
    std::swap(isyearvip_, other->isyearvip_);
    std::swap(passwd_, other->passwd_);
    std::swap(salt_, other->salt_);
    std::swap(lgtm_, other->lgtm_);
    std::swap(lxlg_, other->lxlg_);
    std::swap(qq_, other->qq_);
    std::swap(address_, other->address_);
    std::swap(regip_, other->regip_);
    std::swap(active_assets_, other->active_assets_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MemberFides::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MemberFides_descriptor_;
  metadata.reflection = MemberFides_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
